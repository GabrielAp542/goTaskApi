// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/tasks": {
            "get": {
                "description": "gets all the tasks from database",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "tasks"
                ],
                "summary": "get all tasks registrated",
                "responses": {
                    "200": {
                        "description": "Task created",
                        "schema": {
                            "$ref": "#/definitions/tasks_request.TaskDataDoc"
                        }
                    },
                    "400": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/tasks_request.ErrorDoc"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/tasks_request.ErrorDoc"
                        }
                    }
                }
            },
            "post": {
                "description": "Creates a task to database",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "tasks"
                ],
                "summary": "Create a task",
                "parameters": [
                    {
                        "description": "Task body",
                        "name": "Tasks",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/tasks_request.TaskDataDoc"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Task created",
                        "schema": {
                            "$ref": "#/definitions/tasks_request.TaskDataDoc"
                        }
                    },
                    "400": {
                        "description": "Invalid JSON:API request format",
                        "schema": {
                            "$ref": "#/definitions/tasks_request.ErrorDoc"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/tasks_request.ErrorDoc"
                        }
                    }
                }
            }
        },
        "/tasks/{id}": {
            "put": {
                "description": "update a specific task from database",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "tasks"
                ],
                "summary": "update task",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "task id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Task body",
                        "name": "Tasks",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/tasks_request.TaskDataDoc"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "updated task",
                        "schema": {
                            "$ref": "#/definitions/tasks_request.TaskDataDoc"
                        }
                    },
                    "400": {
                        "description": "Invalid task ID or Body",
                        "schema": {
                            "$ref": "#/definitions/tasks_request.TaskDataDoc"
                        }
                    },
                    "404": {
                        "description": "server Error",
                        "schema": {
                            "$ref": "#/definitions/tasks_request.TaskDataDoc"
                        }
                    }
                }
            },
            "delete": {
                "description": "delete an specific task from database",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "tasks"
                ],
                "summary": "delete task",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "task id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "deleted task",
                        "schema": {
                            "$ref": "#/definitions/tasks_request.TaskDataDoc"
                        }
                    },
                    "400": {
                        "description": "Invalid task ID ",
                        "schema": {
                            "$ref": "#/definitions/tasks_request.TaskDataDoc"
                        }
                    },
                    "404": {
                        "description": "server Error"
                    }
                }
            }
        },
        "/tasksId/{id}": {
            "get": {
                "description": "gets an specific task from database",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "tasks"
                ],
                "summary": "Get task id",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "task id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "400": {
                        "description": "Invalid task ID",
                        "schema": {
                            "$ref": "#/definitions/tasks_request.TaskDataDoc"
                        }
                    },
                    "404": {
                        "description": "value not fould",
                        "schema": {
                            "$ref": "#/definitions/tasks_request.TaskDataDoc"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "tasks_request.ErrorDoc": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string"
                }
            }
        },
        "tasks_request.TaskDataDoc": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "object",
                    "properties": {
                        "attributes": {
                            "type": "object",
                            "properties": {
                                "completed": {
                                    "type": "boolean"
                                },
                                "task_name": {
                                    "type": "string"
                                }
                            }
                        },
                        "relationships": {
                            "type": "object",
                            "properties": {
                                "user": {
                                    "type": "object",
                                    "properties": {
                                        "id": {
                                            "type": "integer"
                                        }
                                    }
                                }
                            }
                        },
                        "task_id": {
                            "type": "integer"
                        }
                    }
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:8080",
	BasePath:         "/",
	Schemes:          []string{},
	Title:            "Task Api Go",
	Description:      "Task Api",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
